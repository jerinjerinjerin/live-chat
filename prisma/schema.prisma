generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  name                String
  email               String    @unique
  password            String
  avatarUrl           String?
  isEmailVerified     Boolean   @default(false)
  role                UserRole  @default(USER)
  isPaid              Boolean   @default(false)
  isActive            Boolean   @default(true)
  otp                 String?
  otpExpiresAt        DateTime?
  isGoogleUser        Boolean   @default(false)
  lastLoginAt         DateTime?
  lastActivityAt      DateTime?
  failedLoginAttempts Int       @default(0)
  refreshToken        String?   // ✅ Hashed refresh token
  refreshTokenExpiry  DateTime? // ✅ Optional: expiry for refresh token
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

   // ✅ Relations for Chat System
  chatsCreated        Chat[]        @relation("CreatedChats") // Chats the user created
  chatMemberships     ChatMember[]  // Chats the user is part of
  messagesSent        Message[]     // Messages sent by this user
  readReceipts        ReadReceipt[] // Messages read by this user

  @@index([email])
  @@index([isActive])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model Chat {
  id            String       @id @default(uuid())
  name          String?      
  isGroup       Boolean      @default(false)
  createdById   String
  createdBy     User         @relation("CreatedChats", fields: [createdById], references: [id], onDelete: Cascade)
  participants  ChatMember[]
  messages      Message[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

model ChatMember {
  id         String   @id @default(uuid())
  chatId     String
  userId     String
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt   DateTime @default(now())
  lastReadAt DateTime?
  role       ChatRole @default(MEMBER)

  @@unique([chatId, userId])
}

model Message {
  id          String        @id @default(uuid())
  chatId      String
  senderId    String
  content     String?
  messageType MessageType   @default(TEXT)
  attachments Attachment[]
  chat        Chat          @relation(fields: [chatId], references: [id])
  sender      User          @relation(fields: [senderId], references: [id])
  readReceipts ReadReceipt[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String
  url       String
  fileType  String
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())
}

model ReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

enum ChatRole {
  MEMBER
  ADMIN
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  AUDIO
}

